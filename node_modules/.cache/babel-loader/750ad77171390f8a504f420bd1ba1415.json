{"remainingRequest":"/Users/haneul/Workspace/uilab-github.github.io/node_modules/thread-loader/dist/cjs.js!/Users/haneul/Workspace/uilab-github.github.io/node_modules/babel-loader/lib/index.js!/Users/haneul/Workspace/uilab-github.github.io/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/Users/haneul/Workspace/uilab-github.github.io/src/helpers/loader.js","dependencies":[{"path":"/Users/haneul/Workspace/uilab-github.github.io/src/helpers/loader.js","mtime":1676894328166},{"path":"/Users/haneul/Workspace/uilab-github.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1650950652954},{"path":"/Users/haneul/Workspace/uilab-github.github.io/node_modules/thread-loader/dist/cjs.js","mtime":1650950653212},{"path":"/Users/haneul/Workspace/uilab-github.github.io/node_modules/babel-loader/lib/index.js","mtime":1650950647384},{"path":"/Users/haneul/Workspace/uilab-github.github.io/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1650950652160}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _asyncToGenerator from \"/Users/haneul/Workspace/uilab-github.github.io/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar DOC_ID = '1v2JBn1EHa20kcwz5rtszoNmjx9Znqzk-dGMhKw1m3vE';\nvar API_KEY = 'AIzaSyBoX_m8IQZO2Fq__4XgkIRADhVXTJwtsbs';\nimport sheets from '@/helpers/sheets';\nsheets.setKey(API_KEY);\nexport function loadData() {\n  return _loadData.apply(this, arguments);\n}\n\nfunction _loadData() {\n  _loadData = _asyncToGenerator(\n  /*#__PURE__*/\n  regeneratorRuntime.mark(function _callee() {\n    var ranges, response, valueRanges, announcements, joinus, members, research, demos, tags, links, redirections;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            ranges = ['Announcements!A2:C', 'JoinUs!A2:D', 'Members!A2:H', 'Research!A2:F', 'Demos!A2:G', 'Tags!A2:F', 'Links!A2:G', 'Redirections!A2:B'];\n            _context.next = 3;\n            return sheets.getRanges(DOC_ID, ranges);\n\n          case 3:\n            response = _context.sent;\n            valueRanges = response.valueRanges;\n            announcements = getAnnouncementsFromValues(valueRanges[0].values);\n            joinus = getJoinUsFromValues(valueRanges[1].values);\n            members = getMembersFromValues(valueRanges[2].values);\n            research = getResearchFromValues(valueRanges[3].values);\n            demos = getDemosFromValues(valueRanges[4].values);\n            tags = getTagsFromValues(valueRanges[5].values);\n            links = getLinksFromValues(valueRanges[6].values);\n            redirections = getRedirectionsFromValues(valueRanges[7].values);\n            return _context.abrupt(\"return\", {\n              announcements: announcements,\n              joinus: joinus,\n              members: members,\n              research: research,\n              demos: demos,\n              tags: tags,\n              links: links,\n              redirections: redirections\n            });\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _loadData.apply(this, arguments);\n}\n\nfunction getAnnouncementsFromValues(values) {\n  var announcements = [];\n  var now = new Date();\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var row = _step.value;\n      var expireAt = row[2] ? new Date(Date.parse(row[2])) : null;\n\n      if (!row[1]) {\n        continue;\n      } else if (expireAt && expireAt < now) {\n        continue;\n      }\n\n      announcements.push({\n        title: row[0],\n        content: row[1]\n      });\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return announcements;\n}\n\nfunction getJoinUsFromValues(values) {\n  var groups = [];\n  var now = new Date();\n  var group = null;\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = values[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var row = _step2.value;\n      var expireAt = row[3] ? new Date(Date.parse(row[3])) : null;\n\n      if (expireAt && expireAt < now) {\n        continue;\n      }\n\n      var type = row[0];\n\n      if (!group || group.type !== type) {\n        if (group) {\n          groups.push(group);\n        }\n\n        group = {\n          type: type,\n          joinus: []\n        };\n      }\n\n      group.joinus.push({\n        title: row[1],\n        content: row[2]\n      });\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  if (group) {\n    groups.push(group);\n  }\n\n  return groups;\n}\n\nfunction getMembersFromValues(values) {\n  var groups = [];\n  var group = null;\n  var _iteratorNormalCompletion3 = true;\n  var _didIteratorError3 = false;\n  var _iteratorError3 = undefined;\n\n  try {\n    for (var _iterator3 = values[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n      var row = _step3.value;\n      var title = row[0];\n\n      if (!group || group.title !== title) {\n        if (group) {\n          groups.push(group);\n        }\n\n        group = {\n          title: title,\n          members: []\n        };\n      }\n\n      group.members.push({\n        name: row[1],\n        email: row[2],\n        image: row[3],\n        description: row[4],\n        links: row[5],\n        degree: row[6],\n        year: row[7]\n      });\n    }\n  } catch (err) {\n    _didIteratorError3 = true;\n    _iteratorError3 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n        _iterator3.return();\n      }\n    } finally {\n      if (_didIteratorError3) {\n        throw _iteratorError3;\n      }\n    }\n  }\n\n  if (group) {\n    groups.push(group);\n  }\n\n  return groups;\n}\n\nfunction getResearchFromValues(values) {\n  var categories = [];\n  var category = null;\n  var _iteratorNormalCompletion4 = true;\n  var _didIteratorError4 = false;\n  var _iteratorError4 = undefined;\n\n  try {\n    for (var _iterator4 = values[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n      var row = _step4.value;\n      var title = row[0];\n\n      if (!category || category.title !== title) {\n        if (category) {\n          categories.push(category);\n        }\n\n        category = {\n          title: title,\n          items: []\n        };\n      }\n\n      category.items.push({\n        title: row[1],\n        authors: row[2],\n        booktitle: row[3],\n        links: row[4],\n        tags: (row[5] || '').split(',').map(function (tag) {\n          return tag.trim();\n        })\n      });\n    }\n  } catch (err) {\n    _didIteratorError4 = true;\n    _iteratorError4 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n        _iterator4.return();\n      }\n    } finally {\n      if (_didIteratorError4) {\n        throw _iteratorError4;\n      }\n    }\n  }\n\n  if (category) {\n    categories.push(category);\n  }\n\n  return categories;\n}\n\nfunction getDemosFromValues(values) {\n  var demos = [];\n  var _iteratorNormalCompletion5 = true;\n  var _didIteratorError5 = false;\n  var _iteratorError5 = undefined;\n\n  try {\n    for (var _iterator5 = values[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n      var row = _step5.value;\n      demos.push({\n        title: row[0],\n        authors: row[1],\n        booktitle: row[2],\n        link: row[3],\n        image: row[4],\n        short: row[5],\n        long: row[6]\n      });\n    }\n  } catch (err) {\n    _didIteratorError5 = true;\n    _iteratorError5 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n        _iterator5.return();\n      }\n    } finally {\n      if (_didIteratorError5) {\n        throw _iteratorError5;\n      }\n    }\n  }\n\n  return demos;\n}\n\nfunction getTagsFromValues(values) {\n  var tags = {};\n  var _iteratorNormalCompletion6 = true;\n  var _didIteratorError6 = false;\n  var _iteratorError6 = undefined;\n\n  try {\n    for (var _iterator6 = values[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n      var row = _step6.value;\n      var tagId = row[0];\n      tags[tagId] = {\n        title: row[1],\n        tag: row[2],\n        color: row[3]\n      };\n    }\n  } catch (err) {\n    _didIteratorError6 = true;\n    _iteratorError6 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n        _iterator6.return();\n      }\n    } finally {\n      if (_didIteratorError6) {\n        throw _iteratorError6;\n      }\n    }\n  }\n\n  return tags;\n}\n\nfunction getLinksFromValues(values) {\n  var groups = [];\n  var group = null;\n  var _iteratorNormalCompletion7 = true;\n  var _didIteratorError7 = false;\n  var _iteratorError7 = undefined;\n\n  try {\n    for (var _iterator7 = values[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n      var row = _step7.value;\n      var category = row[0];\n\n      if (!group || group.category !== category) {\n        if (group) {\n          groups.push(group);\n        }\n\n        group = {\n          category: category,\n          links: []\n        };\n      }\n\n      group.links.push({\n        title: row[1],\n        fullTitle: row[2],\n        url: row[3],\n        query: row[4],\n        callMonth: row[5],\n        eventMonth: row[6]\n      });\n    }\n  } catch (err) {\n    _didIteratorError7 = true;\n    _iteratorError7 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion7 && _iterator7.return != null) {\n        _iterator7.return();\n      }\n    } finally {\n      if (_didIteratorError7) {\n        throw _iteratorError7;\n      }\n    }\n  }\n\n  if (group) {\n    groups.push(group);\n  }\n\n  return groups;\n}\n\nfunction getRedirectionsFromValues(values) {\n  var redirections = {};\n  var _iteratorNormalCompletion8 = true;\n  var _didIteratorError8 = false;\n  var _iteratorError8 = undefined;\n\n  try {\n    for (var _iterator8 = values[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n      var row = _step8.value;\n      var src = row[0].trim();\n      redirections[src] = row[1];\n    }\n  } catch (err) {\n    _didIteratorError8 = true;\n    _iteratorError8 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion8 && _iterator8.return != null) {\n        _iterator8.return();\n      }\n    } finally {\n      if (_didIteratorError8) {\n        throw _iteratorError8;\n      }\n    }\n  }\n\n  return redirections;\n}",{"version":3,"sources":["/Users/haneul/Workspace/uilab-github.github.io/src/helpers/loader.js"],"names":["DOC_ID","API_KEY","sheets","setKey","loadData","ranges","getRanges","response","valueRanges","announcements","getAnnouncementsFromValues","values","joinus","getJoinUsFromValues","members","getMembersFromValues","research","getResearchFromValues","demos","getDemosFromValues","tags","getTagsFromValues","links","getLinksFromValues","redirections","getRedirectionsFromValues","now","Date","row","expireAt","parse","push","title","content","groups","group","type","name","email","image","description","degree","year","categories","category","items","authors","booktitle","split","map","tag","trim","link","short","long","tagId","color","fullTitle","url","query","callMonth","eventMonth","src"],"mappings":"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","sourcesContent":["const DOC_ID = '1v2JBn1EHa20kcwz5rtszoNmjx9Znqzk-dGMhKw1m3vE'\nconst API_KEY = 'AIzaSyBoX_m8IQZO2Fq__4XgkIRADhVXTJwtsbs'\n\nimport sheets from '@/helpers/sheets'\nsheets.setKey(API_KEY)\n\nexport async function loadData() {\n  const ranges = [\n    'Announcements!A2:C',\n    'JoinUs!A2:D',\n    'Members!A2:H',\n    'Research!A2:F',\n    'Demos!A2:G',\n    'Tags!A2:F',\n    'Links!A2:G',\n    'Redirections!A2:B',\n  ]\n  const response = await sheets.getRanges(DOC_ID, ranges)\n  const valueRanges = response.valueRanges\n  const announcements = getAnnouncementsFromValues(valueRanges[0].values)\n  const joinus = getJoinUsFromValues(valueRanges[1].values)\n  const members = getMembersFromValues(valueRanges[2].values)\n  const research = getResearchFromValues(valueRanges[3].values)\n  const demos = getDemosFromValues(valueRanges[4].values)\n  const tags = getTagsFromValues(valueRanges[5].values)\n  const links = getLinksFromValues(valueRanges[6].values)\n  const redirections = getRedirectionsFromValues(valueRanges[7].values)\n  return { announcements, joinus, members, research, demos, tags, links, redirections }\n}\n\nfunction getAnnouncementsFromValues(values) {\n  const announcements = []\n  const now = new Date()\n  for (let row of values) {\n    const expireAt = row[2] ? new Date(Date.parse(row[2])) : null\n    if (!row[1]) {\n      continue\n    } else if (expireAt && (expireAt < now)) {\n      continue\n    }\n    announcements.push({\n      title: row[0],\n      content: row[1]\n    })\n  }\n  return announcements\n}\n\nfunction getJoinUsFromValues(values) {\n  const groups = []\n  const now = new Date()\n  let group = null\n  for (let row of values) {\n    const expireAt = row[3] ? new Date(Date.parse(row[3])) : null\n    if (expireAt && (expireAt < now)) {\n      continue\n    }\n    const type = row[0]\n    if (!group || (group.type !== type)) {\n      if (group) {\n        groups.push(group)\n      }\n      group = { type, joinus: [] }\n    }\n    group.joinus.push({\n      title: row[1],\n      content: row[2]\n    })\n  }\n  if (group) {\n    groups.push(group)\n  }\n  return groups\n}\n\nfunction getMembersFromValues(values) {\n  const groups = []\n  let group = null\n  for (let row of values) {\n    const title = row[0]\n    if (!group || (group.title !== title)) {\n      if (group) {\n        groups.push(group)\n      }\n      group = { title, members: [] }\n    }\n    group.members.push({\n      name: row[1],\n      email: row[2],\n      image: row[3],\n      description: row[4],\n      links: row[5],\n      degree: row[6],\n      year: row[7]\n    })\n  }\n  if (group) {\n    groups.push(group)\n  }\n  return groups\n}\n\n function getResearchFromValues(values) {\n  const categories = []\n  let category = null\n  for (let row of values) {\n    const title = row[0]\n    if (!category || (category.title !== title)) {\n      if (category) {\n        categories.push(category)\n      }\n      category = { title, items: [] }\n    }\n    category.items.push({\n      title: row[1],\n      authors: row[2],\n      booktitle: row[3],\n      links: row[4],\n      tags: (row[5] || '').split(',').map(tag => tag.trim())\n    })\n  }\n  if (category) {\n    categories.push(category)\n  }\n  return categories\n}\n\nfunction getDemosFromValues(values) {\n  const demos = []\n  for (let row of values) {\n    demos.push({\n      title: row[0],\n      authors: row[1],\n      booktitle: row[2],\n      link: row[3],\n      image: row[4],\n      short: row[5],\n      long: row[6]\n    })\n  }\n  return demos\n}\n\nfunction getTagsFromValues(values) {\n  const tags = {}\n  for (let row of values) {\n    const tagId = row[0]\n    tags[tagId] = {\n      title: row[1],\n      tag: row[2],\n      color: row[3]\n    }\n  }\n  return tags\n}\n\nfunction getLinksFromValues(values) {\n  const groups = []\n  let group = null\n  for (let row of values) {\n    const category = row[0]\n    if (!group || (group.category !== category)) {\n      if (group) {\n        groups.push(group)\n      }\n      group = { category, links: [] }\n    }\n    group.links.push({\n      title: row[1],\n      fullTitle: row[2],\n      url: row[3],\n      query: row[4],\n      callMonth: row[5],\n      eventMonth: row[6]\n    })\n  }\n  if (group) {\n    groups.push(group)\n  }\n  return groups\n}\n\nfunction getRedirectionsFromValues(values) {\n  const redirections = {}\n  for (const row of values) {\n    const src = row[0].trim()\n    redirections[src] = row[1]\n  }\n  return redirections\n}"]}]}