{"remainingRequest":"/Users/jinjiho/Desktop/uilab-github.github.io/node_modules/thread-loader/dist/cjs.js!/Users/jinjiho/Desktop/uilab-github.github.io/node_modules/babel-loader/lib/index.js!/Users/jinjiho/Desktop/uilab-github.github.io/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/Users/jinjiho/Desktop/uilab-github.github.io/src/helpers/sheets.js","dependencies":[{"path":"/Users/jinjiho/Desktop/uilab-github.github.io/src/helpers/sheets.js","mtime":1673620384712},{"path":"/Users/jinjiho/Desktop/uilab-github.github.io/node_modules/cache-loader/dist/cjs.js","mtime":1673622416202},{"path":"/Users/jinjiho/Desktop/uilab-github.github.io/node_modules/thread-loader/dist/cjs.js","mtime":1673622416556},{"path":"/Users/jinjiho/Desktop/uilab-github.github.io/node_modules/babel-loader/lib/index.js","mtime":1673622406536},{"path":"/Users/jinjiho/Desktop/uilab-github.github.io/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1673622414755}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/jinjiho/Desktop/uilab-github.github.io/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/jinjiho/Desktop/uilab-github.github.io/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jinjiho/Desktop/uilab-github.github.io/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nvar URL_BASE = 'https://sheets.googleapis.com/v4/spreadsheets';\n\nvar Sheets =\n/*#__PURE__*/\nfunction () {\n  function Sheets() {\n    _classCallCheck(this, Sheets);\n\n    this.key = null;\n  }\n\n  _createClass(Sheets, [{\n    key: \"validateKey\",\n    value: function validateKey() {\n      if (this.key === null) {\n        throw Error('Use setKey(key) method to set API key for using Google API first.');\n      }\n    }\n  }, {\n    key: \"setKey\",\n    value: function setKey(key) {\n      this.key = key;\n    }\n  }, {\n    key: \"getContent\",\n    value: function () {\n      var _getContent = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(docId, sheet, range) {\n        var url, response;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.validateKey();\n                url = \"\".concat(URL_BASE, \"/\").concat(docId, \"/values/\").concat(sheet, \"!\").concat(range, \"?key=\").concat(this.key);\n                _context.next = 4;\n                return fetch(url);\n\n              case 4:\n                response = _context.sent;\n                return _context.abrupt(\"return\", response.json());\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getContent(_x, _x2, _x3) {\n        return _getContent.apply(this, arguments);\n      }\n\n      return getContent;\n    }()\n  }, {\n    key: \"getRanges\",\n    value: function () {\n      var _getRanges = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2(docId, ranges) {\n        var rangeParams, url, response;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.validateKey();\n                rangeParams = ranges.map(function (r) {\n                  return \"ranges=\".concat(encodeURI(r));\n                }).join('&');\n                url = \"\".concat(URL_BASE, \"/\").concat(docId, \"/values:batchGet?\").concat(rangeParams, \"&key=\").concat(this.key);\n                _context2.next = 5;\n                return fetch(url);\n\n              case 5:\n                response = _context2.sent;\n                return _context2.abrupt(\"return\", response.json());\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getRanges(_x4, _x5) {\n        return _getRanges.apply(this, arguments);\n      }\n\n      return getRanges;\n    }()\n  }]);\n\n  return Sheets;\n}();\n\nexport default new Sheets();",{"version":3,"sources":["/Users/jinjiho/Desktop/uilab-github.github.io/src/helpers/sheets.js"],"names":["URL_BASE","Sheets","key","Error","docId","sheet","range","validateKey","url","fetch","response","json","ranges","rangeParams","map","r","encodeURI","join"],"mappings":";;;;AAAA,IAAMA,QAAQ,GAAG,+CAAjB;;IAEMC,M;;;AACJ,oBAAc;AAAA;;AACZ,SAAKC,GAAL,GAAW,IAAX;AACD;;;;kCAEa;AACZ,UAAI,KAAKA,GAAL,KAAa,IAAjB,EAAuB;AACrB,cAAMC,KAAK,CAAC,mEAAD,CAAX;AACD;AACF;;;2BAEMD,G,EAAK;AACV,WAAKA,GAAL,GAAWA,GAAX;AACD;;;;;;+CAEgBE,K,EAAOC,K,EAAOC,K;;;;;;AAC7B,qBAAKC,WAAL;AAEMC,gBAAAA,G,aAASR,Q,cAAYI,K,qBAAgBC,K,cAASC,K,kBAAa,KAAKJ,G;;uBAC/CO,KAAK,CAACD,GAAD,C;;;AAAtBE,gBAAAA,Q;iDACCA,QAAQ,CAACC,IAAT,E;;;;;;;;;;;;;;;;;;;;;gDAGOP,K,EAAOQ,M;;;;;;AACrB,qBAAKL,WAAL;AAEMM,gBAAAA,W,GAAcD,MAAM,CAACE,GAAP,CAAW,UAAAC,CAAC;AAAA,0CAAcC,SAAS,CAACD,CAAD,CAAvB;AAAA,iBAAZ,EAA0CE,IAA1C,CAA+C,GAA/C,C;AACdT,gBAAAA,G,aAASR,Q,cAAYI,K,8BAAyBS,W,kBAAmB,KAAKX,G;;uBACrDO,KAAK,CAACD,GAAD,C;;;AAAtBE,gBAAAA,Q;kDACCA,QAAQ,CAACC,IAAT,E;;;;;;;;;;;;;;;;;;;;;AAIX,eAAe,IAAIV,MAAJ,EAAf","sourcesContent":["const URL_BASE = 'https://sheets.googleapis.com/v4/spreadsheets'\n\nclass Sheets {\n  constructor() {\n    this.key = null\n  }\n\n  validateKey() {\n    if (this.key === null) {\n      throw Error('Use setKey(key) method to set API key for using Google API first.')\n    }\n  }\n\n  setKey(key) {\n    this.key = key\n  }\n\n  async getContent(docId, sheet, range) {\n    this.validateKey()\n\n    const url = `${URL_BASE}/${docId}/values/${sheet}!${range}?key=${this.key}`\n    const response = await fetch(url)\n    return response.json()\n  }\n\n  async getRanges(docId, ranges) {\n    this.validateKey()\n    \n    const rangeParams = ranges.map(r => `ranges=${encodeURI(r)}`).join('&')\n    const url = `${URL_BASE}/${docId}/values:batchGet?${rangeParams}&key=${this.key}`\n    const response = await fetch(url)\n    return response.json()\n  }\n}\n\nexport default new Sheets()"]}]}